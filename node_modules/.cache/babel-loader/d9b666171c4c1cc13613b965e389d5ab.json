{"ast":null,"code":"import sync from 'framesync';\nimport { alpha, color, degrees, scale, px, progressPercentage, number } from 'style-value-types';\nimport { invariant } from 'hey-listen';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n}\n\nvar createStyler = function (_a) {\n  var onRead = _a.onRead,\n      onRender = _a.onRender,\n      _b = _a.uncachedValues,\n      uncachedValues = _b === void 0 ? new Set() : _b,\n      _c = _a.useCache,\n      useCache = _c === void 0 ? true : _c;\n  return function (_a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var props = __rest(_a, []);\n\n    var state = {};\n    var changedValues = [];\n    var hasChanged = false;\n\n    function setValue(key, value) {\n      if (key.startsWith('--')) {\n        props.hasCSSVariable = true;\n      }\n\n      var currentValue = state[key];\n      state[key] = value;\n      if (state[key] === currentValue) return;\n\n      if (changedValues.indexOf(key) === -1) {\n        changedValues.push(key);\n      }\n\n      if (!hasChanged) {\n        hasChanged = true;\n        sync.render(styler.render);\n      }\n    }\n\n    var styler = {\n      get: function (key, forceRead) {\n        if (forceRead === void 0) {\n          forceRead = false;\n        }\n\n        var useCached = !forceRead && useCache && !uncachedValues.has(key) && state[key] !== undefined;\n        return useCached ? state[key] : onRead(key, props);\n      },\n      set: function (values, value) {\n        if (typeof values === 'string') {\n          setValue(values, value);\n        } else {\n          for (var key in values) {\n            setValue(key, values[key]);\n          }\n        }\n\n        return this;\n      },\n      render: function (forceRender) {\n        if (forceRender === void 0) {\n          forceRender = false;\n        }\n\n        if (hasChanged || forceRender === true) {\n          onRender(state, props, changedValues);\n          hasChanged = false;\n          changedValues.length = 0;\n        }\n\n        return this;\n      }\n    };\n    return styler;\n  };\n};\n\nvar CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;\nvar REPLACE_TEMPLATE = '$1-$2';\n\nvar camelToDash = function (str) {\n  return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();\n};\n\nvar setDomAttrs = function (element, attrs) {\n  for (var key in attrs) {\n    if (attrs.hasOwnProperty(key)) {\n      element.setAttribute(key, attrs[key]);\n    }\n  }\n};\n\nvar camelCache =\n/*#__PURE__*/\nnew Map();\nvar dashCache =\n/*#__PURE__*/\nnew Map();\nvar prefixes = ['Webkit', 'Moz', 'O', 'ms', ''];\nvar numPrefixes = prefixes.length;\nvar isBrowser = typeof document !== 'undefined';\nvar testElement;\n\nvar setDashPrefix = function (key, prefixed) {\n  return dashCache.set(key, camelToDash(prefixed));\n};\n\nvar testPrefix = function (key) {\n  testElement = testElement || document.createElement('div');\n\n  for (var i = 0; i < numPrefixes; i++) {\n    var prefix = prefixes[i];\n    var noPrefix = prefix === '';\n    var prefixedPropertyName = noPrefix ? key : prefix + key.charAt(0).toUpperCase() + key.slice(1);\n\n    if (prefixedPropertyName in testElement.style || noPrefix) {\n      camelCache.set(key, prefixedPropertyName);\n      setDashPrefix(key, \"\" + (noPrefix ? '' : '-') + camelToDash(prefixedPropertyName));\n    }\n  }\n};\n\nvar setServerProperty = function (key) {\n  return setDashPrefix(key, key);\n};\n\nvar prefixer = function (key, asDashCase) {\n  if (asDashCase === void 0) {\n    asDashCase = false;\n  }\n\n  var cache = asDashCase ? dashCache : camelCache;\n  if (!cache.has(key)) isBrowser ? testPrefix(key) : setServerProperty(key);\n  return cache.get(key) || key;\n};\n\nvar axes = ['', 'X', 'Y', 'Z'];\nvar order = ['scale', 'rotate', 'skew', 'transformPerspective'];\nvar transformProps =\n/*#__PURE__*/\norder.reduce(function (acc, key) {\n  return axes.reduce(function (axesAcc, axesKey) {\n    axesAcc.push(key + axesKey);\n    return axesAcc;\n  }, acc);\n}, ['x', 'y', 'z']);\nvar transformPropDictionary =\n/*#__PURE__*/\ntransformProps.reduce(function (dict, key) {\n  dict[key] = true;\n  return dict;\n}, {});\n\nfunction isTransformProp(key) {\n  return transformPropDictionary[key] === true;\n}\n\nfunction sortTransformProps(a, b) {\n  return transformProps.indexOf(a) - transformProps.indexOf(b);\n}\n\nvar transformOriginProps =\n/*#__PURE__*/\nnew Set(['originX', 'originY', 'originZ']);\n\nfunction isTransformOriginProp(key) {\n  return transformOriginProps.has(key);\n}\n\nvar rounded =\n/*#__PURE__*/\n__assign({}, number, {\n  transform: Math.round\n});\n\nvar valueTypes = {\n  color: color,\n  backgroundColor: color,\n  outlineColor: color,\n  fill: color,\n  stroke: color,\n  borderColor: color,\n  borderTopColor: color,\n  borderRightColor: color,\n  borderBottomColor: color,\n  borderLeftColor: color,\n  borderWidth: px,\n  borderTopWidth: px,\n  borderRightWidth: px,\n  borderBottomWidth: px,\n  borderLeftWidth: px,\n  borderRadius: px,\n  radius: px,\n  borderTopLeftRadius: px,\n  borderTopRightRadius: px,\n  borderBottomRightRadius: px,\n  borderBottomLeftRadius: px,\n  width: px,\n  maxWidth: px,\n  height: px,\n  maxHeight: px,\n  size: px,\n  top: px,\n  right: px,\n  bottom: px,\n  left: px,\n  padding: px,\n  paddingTop: px,\n  paddingRight: px,\n  paddingBottom: px,\n  paddingLeft: px,\n  margin: px,\n  marginTop: px,\n  marginRight: px,\n  marginBottom: px,\n  marginLeft: px,\n  rotate: degrees,\n  rotateX: degrees,\n  rotateY: degrees,\n  rotateZ: degrees,\n  scale: scale,\n  scaleX: scale,\n  scaleY: scale,\n  scaleZ: scale,\n  skew: degrees,\n  skewX: degrees,\n  skewY: degrees,\n  distance: px,\n  x: px,\n  y: px,\n  z: px,\n  perspective: px,\n  opacity: alpha,\n  originX: progressPercentage,\n  originY: progressPercentage,\n  originZ: px,\n  zIndex: rounded\n};\n\nvar getValueType = function (key) {\n  return valueTypes[key];\n};\n\nvar getValueAsType = function (value, type) {\n  return type && typeof value === 'number' ? type.transform(value) : value;\n};\n\nvar SCROLL_LEFT = 'scrollLeft';\nvar SCROLL_TOP = 'scrollTop';\nvar scrollKeys =\n/*#__PURE__*/\nnew Set([SCROLL_LEFT, SCROLL_TOP]);\nvar blacklist =\n/*#__PURE__*/\nnew Set([SCROLL_LEFT, SCROLL_TOP, 'transform']);\nvar translateAlias = {\n  x: 'translateX',\n  y: 'translateY',\n  z: 'translateZ'\n};\n\nfunction isCustomTemplate(v) {\n  return typeof v === 'function';\n}\n\nfunction buildTransform(state, transform, transformKeys, transformIsDefault, enableHardwareAcceleration) {\n  var transformString = '';\n  var transformHasZ = false;\n  transformKeys.sort(sortTransformProps);\n  var numTransformKeys = transformKeys.length;\n\n  for (var i = 0; i < numTransformKeys; i++) {\n    var key = transformKeys[i];\n    transformString += (translateAlias[key] || key) + \"(\" + transform[key] + \") \";\n    transformHasZ = key === 'z' ? true : transformHasZ;\n  }\n\n  if (!transformHasZ && enableHardwareAcceleration) {\n    transformString += 'translateZ(0)';\n  } else {\n    transformString = transformString.trim();\n  }\n\n  if (isCustomTemplate(state.transform)) {\n    transformString = state.transform(transform, transformString);\n  } else if (transformIsDefault) {\n    transformString = 'none';\n  }\n\n  return transformString;\n}\n\nfunction buildStyleProperty(state, enableHardwareAcceleration, styles, transform, transformOrigin, transformKeys, isDashCase) {\n  if (enableHardwareAcceleration === void 0) {\n    enableHardwareAcceleration = true;\n  }\n\n  if (styles === void 0) {\n    styles = {};\n  }\n\n  if (transform === void 0) {\n    transform = {};\n  }\n\n  if (transformOrigin === void 0) {\n    transformOrigin = {};\n  }\n\n  if (transformKeys === void 0) {\n    transformKeys = [];\n  }\n\n  if (isDashCase === void 0) {\n    isDashCase = false;\n  }\n\n  var transformIsDefault = true;\n  var hasTransform = false;\n  var hasTransformOrigin = false;\n\n  for (var key in state) {\n    var value = state[key];\n    var valueType = getValueType(key);\n    var valueAsType = getValueAsType(value, valueType);\n\n    if (isTransformProp(key)) {\n      hasTransform = true;\n      transform[key] = valueAsType;\n      transformKeys.push(key);\n\n      if (transformIsDefault) {\n        if (valueType.default && value !== valueType.default || !valueType.default && value !== 0) {\n          transformIsDefault = false;\n        }\n      }\n    } else if (isTransformOriginProp(key)) {\n      transformOrigin[key] = valueAsType;\n      hasTransformOrigin = true;\n    } else if (!blacklist.has(key) || !isCustomTemplate(valueAsType)) {\n      styles[prefixer(key, isDashCase)] = valueAsType;\n    }\n  }\n\n  if (hasTransform || typeof state.transform === 'function') {\n    styles.transform = buildTransform(state, transform, transformKeys, transformIsDefault, enableHardwareAcceleration);\n  }\n\n  if (hasTransformOrigin) {\n    styles.transformOrigin = (transformOrigin.originX || 0) + \" \" + (transformOrigin.originY || 0) + \" \" + (transformOrigin.originZ || 0);\n  }\n\n  return styles;\n}\n\nfunction createStyleBuilder(enableHardwareAcceleration) {\n  if (enableHardwareAcceleration === void 0) {\n    enableHardwareAcceleration = true;\n  }\n\n  var styles = {};\n  var transform = {};\n  var transformOrigin = {};\n  var transformKeys = [];\n  return function (state) {\n    transformKeys.length = 0;\n    buildStyleProperty(state, enableHardwareAcceleration, styles, transform, transformOrigin, transformKeys, true);\n    return styles;\n  };\n}\n\nfunction onRead(key, options) {\n  var element = options.element,\n      preparseOutput = options.preparseOutput;\n  var defaultValueType = getValueType(key);\n\n  if (isTransformProp(key)) {\n    return defaultValueType ? defaultValueType.default || 0 : 0;\n  } else if (scrollKeys.has(key)) {\n    return element[key];\n  } else {\n    var domValue = window.getComputedStyle(element, null).getPropertyValue(prefixer(key, true)) || 0;\n    return preparseOutput && defaultValueType && defaultValueType.test(domValue) && defaultValueType.parse ? defaultValueType.parse(domValue) : domValue;\n  }\n}\n\nfunction onRender(state, _a, changedValues) {\n  var element = _a.element,\n      buildStyles = _a.buildStyles,\n      hasCSSVariable = _a.hasCSSVariable;\n  Object.assign(element.style, buildStyles(state));\n\n  if (hasCSSVariable) {\n    var numChangedValues = changedValues.length;\n\n    for (var i = 0; i < numChangedValues; i++) {\n      var key = changedValues[i];\n\n      if (key.startsWith('--')) {\n        element.style.setProperty(key, state[key]);\n      }\n    }\n  }\n\n  if (changedValues.indexOf(SCROLL_LEFT) !== -1) {\n    element[SCROLL_LEFT] = state[SCROLL_LEFT];\n  }\n\n  if (changedValues.indexOf(SCROLL_TOP) !== -1) {\n    element[SCROLL_TOP] = state[SCROLL_TOP];\n  }\n}\n\nvar cssStyler =\n/*#__PURE__*/\ncreateStyler({\n  onRead: onRead,\n  onRender: onRender,\n  uncachedValues: scrollKeys\n});\n\nfunction createCssStyler(element, _a) {\n  if (_a === void 0) {\n    _a = {};\n  }\n\n  var enableHardwareAcceleration = _a.enableHardwareAcceleration,\n      props = __rest(_a, [\"enableHardwareAcceleration\"]);\n\n  return cssStyler(__assign({\n    element: element,\n    buildStyles: createStyleBuilder(enableHardwareAcceleration),\n    preparseOutput: true\n  }, props));\n}\n\nvar camelCaseAttributes =\n/*#__PURE__*/\nnew Set(['baseFrequency', 'diffuseConstant', 'kernelMatrix', 'kernelUnitLength', 'keySplines', 'keyTimes', 'limitingConeAngle', 'markerHeight', 'markerWidth', 'numOctaves', 'targetX', 'targetY', 'surfaceScale', 'specularConstant', 'specularExponent', 'stdDeviation', 'tableValues']);\nvar ZERO_NOT_ZERO = 0.0000001;\n\nvar progressToPixels = function (progress, length) {\n  return progress * length + 'px';\n};\n\nvar build = function (state, dimensions, isPath, pathLength) {\n  var hasTransform = false;\n  var hasDashArray = false;\n  var props = {};\n  var dashArrayStyles = isPath ? {\n    pathLength: '0',\n    pathSpacing: \"\" + pathLength\n  } : undefined;\n  var scale$$1 = state.scale !== undefined ? state.scale || ZERO_NOT_ZERO : state.scaleX || 1;\n  var scaleY = state.scaleY !== undefined ? state.scaleY || ZERO_NOT_ZERO : scale$$1 || 1;\n  var transformOriginX = dimensions.width * (state.originX || 50) + dimensions.x;\n  var transformOriginY = dimensions.height * (state.originY || 50) + dimensions.y;\n  var scaleTransformX = -transformOriginX * (scale$$1 * 1);\n  var scaleTransformY = -transformOriginY * (scaleY * 1);\n  var scaleReplaceX = transformOriginX / scale$$1;\n  var scaleReplaceY = transformOriginY / scaleY;\n  var transform = {\n    translate: \"translate(\" + state.x + \", \" + state.y + \") \",\n    scale: \"translate(\" + scaleTransformX + \", \" + scaleTransformY + \") scale(\" + scale$$1 + \", \" + scaleY + \") translate(\" + scaleReplaceX + \", \" + scaleReplaceY + \") \",\n    rotate: \"rotate(\" + state.rotate + \", \" + transformOriginX + \", \" + transformOriginY + \") \",\n    skewX: \"skewX(\" + state.skewX + \") \",\n    skewY: \"skewY(\" + state.skewY + \") \"\n  };\n\n  for (var key in state) {\n    if (state.hasOwnProperty(key)) {\n      var value = state[key];\n\n      if (isTransformProp(key)) {\n        hasTransform = true;\n      } else if (isPath && (key === 'pathLength' || key === 'pathSpacing') && typeof value === 'number') {\n        hasDashArray = true;\n        dashArrayStyles[key] = progressToPixels(value, pathLength);\n      } else if (isPath && key === 'pathOffset') {\n        props['stroke-dashoffset'] = progressToPixels(-value, pathLength);\n      } else {\n        var attrKey = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        props[attrKey] = value;\n      }\n    }\n  }\n\n  if (hasDashArray) {\n    props['stroke-dasharray'] = dashArrayStyles.pathLength + ' ' + dashArrayStyles.pathSpacing;\n  }\n\n  if (hasTransform) {\n    props.transform = '';\n\n    for (var key in transform) {\n      if (transform.hasOwnProperty(key)) {\n        var defaultValue = key === 'scale' ? '1' : '0';\n        props.transform += transform[key].replace(/undefined/g, defaultValue);\n      }\n    }\n  }\n\n  return props;\n};\n\nvar int =\n/*#__PURE__*/\n__assign({}, number, {\n  transform: Math.round\n});\n\nvar valueTypes$1 = {\n  fill: color,\n  stroke: color,\n  scale: scale,\n  scaleX: scale,\n  scaleY: scale,\n  opacity: alpha,\n  fillOpacity: alpha,\n  strokeOpacity: alpha,\n  numOctaves: int\n};\n\nvar getValueType$1 = function (key) {\n  return valueTypes$1[key];\n};\n\nvar getDimensions = function (element) {\n  return typeof element.getBBox === 'function' ? element.getBBox() : element.getBoundingClientRect();\n};\n\nvar getSVGElementDimensions = function (element) {\n  try {\n    return getDimensions(element);\n  } catch (e) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n};\n\nvar svgStyler =\n/*#__PURE__*/\ncreateStyler({\n  onRead: function (key, _a) {\n    var element = _a.element;\n\n    if (!isTransformProp(key)) {\n      return element.getAttribute(key);\n    } else {\n      var valueType = getValueType$1(key);\n      return valueType ? valueType.default : 0;\n    }\n  },\n  onRender: function (state, _a) {\n    var dimensions = _a.dimensions,\n        element = _a.element,\n        isPath = _a.isPath,\n        pathLength = _a.pathLength;\n    setDomAttrs(element, build(state, dimensions, isPath, pathLength));\n  }\n});\n\nvar svg = function (element) {\n  var dimensions = getSVGElementDimensions(element);\n  var props = {\n    element: element,\n    dimensions: dimensions,\n    isPath: false\n  };\n\n  if (element.tagName === 'path') {\n    props.isPath = true;\n    props.pathLength = element.getTotalLength();\n  }\n\n  return svgStyler(props);\n};\n\nvar viewport =\n/*#__PURE__*/\ncreateStyler({\n  useCache: false,\n  onRead: function (key) {\n    return key === 'scrollTop' ? window.pageYOffset : window.pageXOffset;\n  },\n  onRender: function (_a) {\n    var _b = _a.scrollTop,\n        scrollTop = _b === void 0 ? 0 : _b,\n        _c = _a.scrollLeft,\n        scrollLeft = _c === void 0 ? 0 : _c;\n    return window.scrollTo(scrollLeft, scrollTop);\n  }\n});\nvar cache =\n/*#__PURE__*/\nnew WeakMap();\n\nvar createDOMStyler = function (node, props) {\n  var styler;\n\n  if (node instanceof HTMLElement) {\n    styler = createCssStyler(node, props);\n  } else if (node instanceof SVGElement) {\n    styler = svg(node);\n  } else if (node === window) {\n    styler = viewport(node);\n  }\n\n  invariant(styler !== undefined, 'No valid node provided. Node must be HTMLElement, SVGElement or window.');\n  cache.set(node, styler);\n  return styler;\n};\n\nvar getStyler = function (node, props) {\n  return cache.has(node) ? cache.get(node) : createDOMStyler(node, props);\n};\n\nfunction index(nodeOrSelector, props) {\n  var node = typeof nodeOrSelector === 'string' ? document.querySelector(nodeOrSelector) : nodeOrSelector;\n  return getStyler(node, props);\n}\n\nexport default index;\nexport { createStyler as createStylerFactory, buildStyleProperty, isTransformProp };","map":null,"metadata":{},"sourceType":"module"}
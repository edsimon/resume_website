{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadFromFile = exports.isCancelException = exports.makePageCallback = exports.cancelRunningTask = exports.makeCancellable = exports.displayCORSWarning = exports.errorOnDev = exports.warnOnDev = exports.getPixelRatio = exports.callIfDefined = exports.dataURItoUint8Array = exports.isDataURI = exports.isFile = exports.isBlob = exports.isArrayBuffer = exports.isString = exports.isProvided = exports.isDefined = exports.isProduction = exports.isLocalFileSystem = exports.isBrowser = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n/**\n * Checks if we're running in a browser environment.\n */\n\n\nvar isBrowser = typeof window !== 'undefined';\n/**\n * Checks whether we're running from a local file system.\n */\n\nexports.isBrowser = isBrowser;\nvar isLocalFileSystem = isBrowser && window.location.protocol === 'file:';\n/**\n * Checks whether we're running on a production build or not.\n */\n\nexports.isLocalFileSystem = isLocalFileSystem;\nvar isProduction = process.env.NODE_ENV === 'production';\n/**\n * Checks whether a variable is defined.\n *\n * @param {*} variable Variable to check\n */\n\nexports.isProduction = isProduction;\n\nvar isDefined = function isDefined(variable) {\n  return typeof variable !== 'undefined';\n};\n/**\n * Checks whether a variable is defined and not null.\n *\n * @param {*} variable Variable to check\n */\n\n\nexports.isDefined = isDefined;\n\nvar isProvided = function isProvided(variable) {\n  return isDefined(variable) && variable !== null;\n};\n/**\n * Checkes whether a variable provided is a string.\n *\n * @param {*} variable Variable to check\n */\n\n\nexports.isProvided = isProvided;\n\nvar isString = function isString(variable) {\n  return typeof variable === 'string';\n};\n/**\n * Checks whether a variable provided is an ArrayBuffer.\n *\n * @param {*} variable Variable to check\n */\n\n\nexports.isString = isString;\n\nvar isArrayBuffer = function isArrayBuffer(variable) {\n  return variable instanceof ArrayBuffer;\n};\n/**\n * Checkes whether a variable provided is a Blob.\n *\n * @param {*} variable Variable to check\n */\n\n\nexports.isArrayBuffer = isArrayBuffer;\n\nvar isBlob = function isBlob(variable) {\n  if (!isBrowser) {\n    throw new Error('Attempted to check if a variable is a Blob on a non-browser environment.');\n  }\n\n  return variable instanceof Blob;\n};\n/**\n * Checkes whether a variable provided is a File.\n *\n * @param {*} variable Variable to check\n */\n\n\nexports.isBlob = isBlob;\n\nvar isFile = function isFile(variable) {\n  if (!isBrowser) {\n    throw new Error('Attempted to check if a variable is a File on a non-browser environment.');\n  }\n\n  return variable instanceof File;\n};\n/**\n * Checks whether a string provided is a data URI.\n *\n * @param {String} str String to check\n */\n\n\nexports.isFile = isFile;\n\nvar isDataURI = function isDataURI(str) {\n  return isString(str) && /^data:/.test(str);\n};\n\nexports.isDataURI = isDataURI;\n\nvar dataURItoUint8Array = function dataURItoUint8Array(dataURI) {\n  if (!isDataURI(dataURI)) {\n    throw new Error('dataURItoUint8Array was provided with an argument which is not a valid data URI.');\n  }\n\n  var byteString;\n\n  if (dataURI.split(',')[0].indexOf('base64') >= 0) {\n    byteString = atob(dataURI.split(',')[1]);\n  } else {\n    byteString = unescape(dataURI.split(',')[1]);\n  }\n\n  var ia = new Uint8Array(byteString.length);\n\n  for (var i = 0; i < byteString.length; i += 1) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  return ia;\n};\n/**\n * Calls a function, if it's defined, with specified arguments\n * @param {Function} fn\n * @param {Object} args\n */\n\n\nexports.dataURItoUint8Array = dataURItoUint8Array;\n\nvar callIfDefined = function callIfDefined(fn) {\n  if (fn && typeof fn === 'function') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    fn.apply(void 0, args);\n  }\n};\n\nexports.callIfDefined = callIfDefined;\n\nvar getPixelRatio = function getPixelRatio() {\n  return isBrowser && window.devicePixelRatio || 1;\n};\n\nexports.getPixelRatio = getPixelRatio;\n\nvar consoleOnDev = function consoleOnDev(method) {\n  if (!isProduction) {\n    var _console;\n\n    for (var _len2 = arguments.length, message = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      message[_key2 - 1] = arguments[_key2];\n    } // eslint-disable-next-line no-console\n\n\n    (_console = console)[method].apply(_console, message);\n  }\n};\n\nvar warnOnDev = function warnOnDev() {\n  for (var _len3 = arguments.length, message = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    message[_key3] = arguments[_key3];\n  }\n\n  return consoleOnDev.apply(void 0, ['warn'].concat(message));\n};\n\nexports.warnOnDev = warnOnDev;\n\nvar errorOnDev = function errorOnDev() {\n  for (var _len4 = arguments.length, message = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    message[_key4] = arguments[_key4];\n  }\n\n  return consoleOnDev.apply(void 0, ['error'].concat(message));\n};\n\nexports.errorOnDev = errorOnDev;\n\nvar displayCORSWarning = function displayCORSWarning() {\n  if (isLocalFileSystem) {\n    warnOnDev('Loading PDF as base64 strings/URLs might not work on protocols other than HTTP/HTTPS. On Google Chrome, you can use --allow-file-access-from-files flag for debugging purposes.');\n  }\n};\n\nexports.displayCORSWarning = displayCORSWarning;\n\nvar PromiseCancelledException =\n/*#__PURE__*/\nfunction (_Error) {\n  (0, _inherits2.default)(PromiseCancelledException, _Error);\n\n  function PromiseCancelledException(message, type) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PromiseCancelledException);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PromiseCancelledException).call(this, message, type));\n    _this.name = 'PromiseCancelledException';\n    _this.message = message;\n    _this.type = type;\n    return _this;\n  }\n\n  return PromiseCancelledException;\n}((0, _wrapNativeSuper2.default)(Error));\n\nvar makeCancellable = function makeCancellable(promise) {\n  var isCancelled = false;\n  var wrappedPromise = new Promise(function (resolve, reject) {\n    promise.then(function () {\n      return isCancelled ? reject(new PromiseCancelledException('Promise cancelled')) : resolve.apply(void 0, arguments);\n    }, function (error) {\n      return isCancelled ? reject(new PromiseCancelledException('Promise cancelled')) : reject(error);\n    });\n  });\n  return {\n    promise: wrappedPromise,\n    cancel: function cancel() {\n      isCancelled = true;\n    }\n  };\n};\n\nexports.makeCancellable = makeCancellable;\n\nvar cancelRunningTask = function cancelRunningTask(runningTask) {\n  if (!runningTask || !runningTask.cancel) {\n    return;\n  }\n\n  runningTask.cancel();\n};\n\nexports.cancelRunningTask = cancelRunningTask;\n\nvar makePageCallback = function makePageCallback(page, scale) {\n  Object.defineProperty(page, 'width', {\n    get: function get() {\n      return this.view[2] * scale;\n    },\n    configurable: true\n  });\n  Object.defineProperty(page, 'height', {\n    get: function get() {\n      return this.view[3] * scale;\n    },\n    configurable: true\n  });\n  Object.defineProperty(page, 'originalWidth', {\n    get: function get() {\n      return this.view[2];\n    },\n    configurable: true\n  });\n  Object.defineProperty(page, 'originalHeight', {\n    get: function get() {\n      return this.view[3];\n    },\n    configurable: true\n  });\n  return page;\n};\n\nexports.makePageCallback = makePageCallback;\n\nvar isCancelException = function isCancelException(error) {\n  return error.name === 'RenderingCancelledException' || error.name === 'PromiseCancelledException';\n};\n\nexports.isCancelException = isCancelException;\n\nvar loadFromFile = function loadFromFile(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      return resolve(new Uint8Array(reader.result));\n    };\n\n    reader.onerror = function (event) {\n      switch (event.target.error.code) {\n        case event.target.error.NOT_FOUND_ERR:\n          return reject(new Error('Error while reading a file: File not found.'));\n\n        case event.target.error.NOT_READABLE_ERR:\n          return reject(new Error('Error while reading a file: File not readable.'));\n\n        case event.target.error.SECURITY_ERR:\n          return reject(new Error('Error while reading a file: Security error.'));\n\n        case event.target.error.ABORT_ERR:\n          return reject(new Error('Error while reading a file: Aborted.'));\n\n        default:\n          return reject(new Error('Error while reading a file.'));\n      }\n    };\n\n    reader.readAsArrayBuffer(file);\n    return null;\n  });\n};\n\nexports.loadFromFile = loadFromFile;","map":null,"metadata":{},"sourceType":"script"}
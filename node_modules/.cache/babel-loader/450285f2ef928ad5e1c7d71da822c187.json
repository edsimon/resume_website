{"ast":null,"code":"'use strict'; // In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n\n/**\n * The default register service worker function\n * @returns {AppServiceWorker}\n */\n\nfunction registerServiceWorker() {\n  return AppServiceWorker.getInstance();\n}\n/**\n * App Service Worker Class\n * \n * @export\n * @class AppServiceWorker\n */\n\n\nexport class AppServiceWorker {\n  /**\n   * Creates an instance of AppServiceWorker.\n   * \n   * @memberof AppServiceWorker\n   */\n  constructor() {\n    this.isLocalhost = Boolean(window.location.hostname === \"localhost\" || // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" || // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n    this.installPromise = new Promise(resolve => this.installPromiseResolver = resolve);\n    this.updatePromise = new Promise(resolve => this.updatePromiseResolver = resolve);\n    this.onUpdateFound(() => console.log(\"New content is available; please refresh.\"));\n    this.onInstalled(() => console.log(\"Content is cached for offline use.\"));\n  }\n  /**\n   * Register the service worker\n   * \n   * @returns \n   * @memberof AppServiceWorker\n   */\n\n\n  register() {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n\n      window.addEventListener(\"load\", () => {\n        const swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n        if (this.isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          this.checkValidServiceWorker(swUrl); // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://goo.gl/SC7cgQ\");\n          });\n        } else {\n          // Is not local host. Just register service worker\n          this.registerValidSW(swUrl);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  registerValidSW(swUrl) {\n    navigator.serviceWorker.register(swUrl).then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              this.updatePromiseResolver();\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              this.installPromiseResolver();\n            }\n          }\n        };\n      };\n    }).catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n  }\n\n  checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl).then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        this.registerValidSW(swUrl);\n      }\n    }).catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n  }\n\n  unregister() {\n    if (\"serviceWorker\" in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n\n  onInstalled(callback) {\n    this.installPromise.then(callback).catch(console.error);\n  }\n\n  onUpdateFound(callback) {\n    this.updatePromise.then(callback).catch(console.error);\n  }\n\n  static getInstance() {\n    return this.instance ? this.instance : this.instance = new this().register();\n  }\n\n}\nexport default registerServiceWorker;","map":null,"metadata":{},"sourceType":"module"}
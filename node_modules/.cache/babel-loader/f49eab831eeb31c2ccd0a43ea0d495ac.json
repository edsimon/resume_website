{"ast":null,"code":"/*\n * React-reveal Global Helpers\n *\n * Copyright Â© Roman Nosov 2017\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n//import {version} from 'react';\nexport const namespace = 'react-reveal'; //, is16 = parseInt(version, 10) >= 16;\n\nexport const defaults = {\n  duration: 1000,\n  delay: 0,\n  count: 1\n};\nexport let ssr = true,\n    observerMode = false,\n    raf = cb => window.setTimeout(cb, 66),\n    disableSsr = () => ssr = false,\n    fadeOutEnabled = false,\n    ssrFadeout = (enable = false) => fadeOutEnabled = enable,\n    globalHide = false,\n    ie10 = false,\n    collapseend;\nlet counter = 1,\n    effectMap = {},\n    sheet = false,\n    name = \"\".concat(namespace, \"-\").concat(Math.floor(Math.random() * 1000000000000000), \"-\");\nexport function insertRule(rule) {\n  try {\n    return sheet.insertRule(rule, sheet.cssRules.length);\n  } catch (e) {\n    console.warn('react-reveal - animation failed');\n  }\n}\nexport function cascade(i, start, end, duration, total) {\n  const minv = Math.log(duration),\n        maxv = Math.log(total),\n        scale = (maxv - minv) / (end - start);\n  return Math.exp(minv + scale * (i - start));\n}\nexport function animation(effect) {\n  if (!sheet) return '';\n  const rule = \"@keyframes \".concat(name + counter, \"{\").concat(effect, \"}\");\n  const effectId = effectMap[effect];\n\n  if (!effectId) {\n    sheet.insertRule(rule, sheet.cssRules.length);\n    effectMap[effect] = counter;\n    return \"\".concat(name).concat(counter++);\n  }\n\n  return \"\".concat(name).concat(effectId);\n}\nexport function hideAll() {\n  if (globalHide) return;\n  globalHide = true;\n  window.removeEventListener('scroll', hideAll, true);\n  insertRule(\".\".concat(namespace, \" { opacity: 0; }\"));\n  window.removeEventListener('orientationchange', hideAll, true);\n  window.document.removeEventListener('visibilitychange', hideAll);\n} //navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\")\n\nif (typeof window !== 'undefined' && window.name !== 'nodejs' && window.document && typeof navigator !== 'undefined') {\n  // are we in browser?\n  observerMode = 'IntersectionObserver' in window && 'IntersectionObserverEntry' in window // bypassing\n  && 'intersectionRatio' in window.IntersectionObserverEntry.prototype // inclomplete implementations\n  && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + IntersectionObserver); // and buggy polyfills\n\n  raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || raf;\n  ssr = window.document.querySelectorAll('div[data-reactroot]').length > 0; // are we prerendered?\n\n  if (navigator.appVersion.indexOf(\"MSIE 10\") !== -1) ie10 = true; //if (ssr && 'serviceWorker' in navigator && navigator.serviceWorker.controller) //cached by service worker?\n  //  ssr = false;\n  //console.log(Date.now() - window.performance.timing.domLoading<500);\n\n  if (ssr && 'performance' in window && 'timing' in window.performance && 'domContentLoadedEventEnd' in window.performance.timing && window.performance.timing.domLoading && Date.now() - window.performance.timing.domLoading < 300) ssr = false;\n  if (ssr) window.setTimeout(disableSsr, 1500);\n\n  if (!observerMode) {\n    collapseend = document.createEvent('Event');\n    collapseend.initEvent('collapseend', true, true);\n  }\n\n  let element = document.createElement('style');\n  document.head.appendChild(element);\n\n  if (element.sheet && element.sheet.cssRules && element.sheet.insertRule) {\n    sheet = element.sheet;\n    window.addEventListener('scroll', hideAll, true);\n    window.addEventListener(\"orientationchange\", hideAll, true);\n    window.document.addEventListener(\"visibilitychange\", hideAll);\n  }\n}\n\nexport default function config({\n  ssrFadeout\n}) {\n  fadeOutEnabled = ssrFadeout;\n}","map":null,"metadata":{},"sourceType":"module"}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
const assert = require('assert');

const fse = require('fs-extra');

const glob = require('glob');

const inquirer = require('inquirer');

const ol = require('common-tags').oneLine;

const _require = require('../constants'),
      ignoredDirectories = _require.ignoredDirectories;

const errors = require('../errors');

const ROOT_PROMPT = 'Please enter the path to the root of your web app:'; // The key used for the question/answer.

const name = 'globDirectory';
/**
 * @return {Promise<Array<string>>} The subdirectories of the current
 * working directory, with hidden and ignored ones filtered out.
 */

function getSubdirectories() {
  return _getSubdirectories.apply(this, arguments);
}
/**
 * @return {Promise<Object>} The answers from inquirer.
 */


function _getSubdirectories() {
  _getSubdirectories = (0, _asyncToGenerator2.default)(function* () {
    return yield new Promise((resolve, reject) => {
      glob('*/', {
        ignore: ignoredDirectories.map(directory => `${directory}/`)
      }, (error, directories) => {
        if (error) {
          reject(error);
        } else {
          resolve(directories);
        }
      });
    });
  });
  return _getSubdirectories.apply(this, arguments);
}

function askQuestion() {
  return _askQuestion.apply(this, arguments);
}

function _askQuestion() {
  _askQuestion = (0, _asyncToGenerator2.default)(function* () {
    const subdirectories = yield getSubdirectories();

    if (subdirectories.length > 0) {
      const manualEntryChoice = 'Manually enter path';
      return inquirer.prompt([{
        name,
        type: 'list',
        message: ol`What is the root of your web app (i.e. which directory do
        you deploy)?`,
        choices: subdirectories.concat([new inquirer.Separator(), manualEntryChoice])
      }, {
        name,
        when: answers => answers[name] === manualEntryChoice,
        message: ROOT_PROMPT
      }]);
    } else {
      return inquirer.prompt([{
        name,
        message: ROOT_PROMPT,
        default: '.'
      }]);
    }
  });
  return _askQuestion.apply(this, arguments);
}

module.exports =
/*#__PURE__*/
(0, _asyncToGenerator2.default)(function* () {
  const answers = yield askQuestion();
  const globDirectory = answers[name];

  try {
    const stat = yield fse.stat(globDirectory);
    assert(stat.isDirectory());
  } catch (error) {
    throw new Error(errors['glob-directory-invalid']);
  }

  return globDirectory;
});